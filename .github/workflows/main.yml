# name of the workflow
name: CI

# event that trigger the execution of the action (can by multiple
on:
    push:
        branches:
            - master
            - features/*

# list of jobs to be executed.
# jobs by default are executed in parallel
jobs:
    build:
        # the name of the image of the virtual machine to be used
        runs-on: ubuntu-latest

        # each job contains a sequence of tasks called steps
        # steps can run commands
        steps:
            -   uses: actions/checkout@v1

#            - name: Copy ENV Symfony Configuration for CI
#              run: |
#                php -r "file_exists('.env') || copy('.env.test', '.env');"

            -   name: Build the docker-compose stack
                run: docker-compose -f docker-compose.yml -f docker-compose.ci.yml up -d

            -   name: Check running containers
                run: docker ps -a

            -   name: Check logs
                run: docker logs app

            -   name: Install composer dependencies
                working-directory: ./app
                run: |
                    composer install -q --no-ansi --no-interaction --no-suggest --prefer-dist

            -   name: Install && build frontend assets
                working-directory: ./app
                run: |
                    yarn install --pure-lockfile
                    yarn encore production

            -   name: Generate secret
                working-directory: ./app
                run: |
                    php bin/console secrets:generate-keys

            -   name: Run migrations
                working-directory: ./app
                run: |
                    php bin/console doctrine:migrations:migrate --env=test --no-interaction

            -   name: Run tests
                working-directory: ./app
                run: |
                    php bin/phpunit


#    phpstan:
#        name: PHPStan
#        runs-on: ubuntu-latest
#        steps:
#            -   uses: actions/checkout@master
#            -   name: Run PHPStan
#                uses: docker://jakzal/phpqa:php7.3-alpine
#                working-directory: ./app
#                with:
#                    args: phpstan analyze
#
#    php-cs-fixer:
#        name: PHP-CS-Fixer
#        runs-on: ubuntu-latest
#        steps:
#            -   uses: actions/checkout@master
#            -   name: Run PHP-CS-Fixer
#                working-directory: ./app
#                uses: docker://jakzal/phpqa:php7.3-alpine
#                with:
#                    args: php-cs-fixer fix --dry-run --diff-format udiff -vvv
